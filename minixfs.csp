datatype CallType = C | R | X
datatype B = GetB | PutB
datatype S = Alloc | Free
datatype I = GetI | PutI
datatype F = Read | Write
datatype D = Lookup | Link
datatype SC = Fopen | Fclose | Fread | Fwrite

channel dev_read
channel b : B.CallType
channel s : S.CallType
channel i : I.CallType
channel f : F.CallType
channel d : D.CallType
channel sc : SC.CallType

CACHE_SIZE=3
OPEN_FILES=3

BlockCache(n,m) = (m > 0) & b.PutB.X -> BlockCache(n,m-1)
             [] ((n + m) < CACHE_SIZE) & b.GetB.C -> BlockCache(n+1,m)
             [] (n > 0) & dev_read -> b.GetB.R -> BlockCache(n-1,m+1)

BlockCache0 = BlockCache(0,0)

Superblock = s.Alloc.C -> b.GetB.C -> b.GetB.R -> b.PutB.X -> s.Alloc.R -> Superblock
          [] s.Free.C -> b.GetB.C -> b.GetB.R ->  b.PutB.X -> s.Free.R -> Superblock

InodeCache(n,m) = (m > 0) & i.PutI.X -> InodeCache(n,m-1)
             [] ((n + m) < CACHE_SIZE) & i.GetI.C -> InodeCache(n+1,m)
             [] (n > 0) & b.GetB.C -> b.GetB.R -> i.GetI.R -> b.PutB.X -> InodeCache(n-1,m+1)

InodeCache0 = InodeCache(0,0)

Finode = f.Read.C -> FinodeReading
      [] f.Write.C -> FinodeWriting

FinodeReading = b.GetB.C -> b.GetB.R -> b.PutB.X -> FinodeReading
             [] b.GetB.C -> b.GetB.R -> b.PutB.X -> f.Read.R -> Finode

FinodeWriting = b.GetB.C -> b.GetB.R -> b.PutB.X -> FinodeWriting
             [] b.GetB.C -> b.GetB.R -> b.PutB.X -> s.Alloc.C -> s.Alloc.R -> s.Free.C -> s.Free.R -> FinodeWriting
             [] b.GetB.C -> b.GetB.R -> b.PutB.X -> f.Write.R -> Finode

Dinode = d.Lookup.C -> b.GetB.C -> b.GetB.R -> b.PutB.X -> i.GetI.C -> i.GetI.R -> i.PutI.X -> d.Lookup.R -> Dinode
      [] d.Link.C -> b.GetB.C -> b.GetB.R -> b.PutB.X -> s.Alloc.C -> s.Alloc.R -> s.Free.C -> s.Free.R -> b.GetB.C -> b.GetB.R -> b.PutB.X -> d.Link.R -> Dinode

Syscalls = sc.Fopen.C -> d.Lookup.C -> d.Lookup.R -> s.Alloc.C -> s.Alloc.R -> d.Link.C -> d.Link.R -> sc.Fopen.R -> Syscalls
        [] sc.Fclose.C -> sc.Fclose.R -> Syscalls
        [] sc.Fread.C -> f.Fread.C -> f.Fread.R -> sc.Fread.R -> Syscalls
        [] sc.Fwrite.C -> f.Fwrite.C -> f.Fwrite.R -> sc.Fwrite.R -> Syscalls 

Alpha = Dinode ||| Finode
Beta = Syscalls [| {|d.Lookup, d.Link, f.Read, f.Write|} |] Alpha
Gamma = Superblock [| {|s.Alloc, s.Free|} |] Beta
Delta = InodeCache0 [| {|i.GetI, i.PutI|} |] Gamma
FileSystem = BlockCache0 [| {|b.GetB, b.PutB|} |] Delta
FileSystemH = FileSystem \ InternalEvents

InternalEvents = {|b, s, i, f, d, dev_read|}

Client(n) = (n < 3) & sc.Fopen.C -> sc.Fopen.R -> Client(n+1)
         [] (n > 0) & sc.Fclose.C -> sc.Fclose.R -> Client(n-1)
         [] (n > 0) & sc.Fread.C -> sc.Fread.R -> Client(n)
         [] (n > 0) & sc.Fwrite.C -> sc.Fwrite.R -> Client(n)


ClientSpec(n) = (n < 3) & sc.Fopen.C -> sc.Fopen.R -> ClientSpec(n+1)
             [] (n > 0) & sc.Fclose.C -> sc.Fclose.R -> ClientSpec(n-1)
             [] (n > 0) & sc.Fread.C -> sc.Fread.R -> ClientSpec(n)
             [] (n > 0) & sc.Fwrite.C -> sc.Fwrite.R -> ClientSpec(n)

assert (FileSystem [| SyscallEvents |] Client(0)) [T= STOP
assert (FileSystem [| SyscallEvents |] Client(0)) [T= ClientSpec(0)
