datatype Func = GetB | Alloc | Free | GetI | Read | Write | Lookup | Link
datatype AFunc = PutB | PutI
datatype Syscalls = Fopen | Fclose | Fread | Fwrite

channel scall: Syscalls
channel sret: Syscalls

channel call,ecall : Func
channel ret,eret : Func
channel callret,ecallret : AFunc
channel recurse

CONC_LEVEL = 2

------------------------------------------------------------------------------
-- BlockCache
------------------------------------------------------------------------------
channel dev_read, dev_write

DeviceEvents = {dev_read, dev_write}
Device = dev_read -> Device
      [] dev_write -> Device

BlockCacheSlotEmpty = call.GetB -> BlockCacheSlotGet
BlockCacheSlotFull = callret.PutB -> BlockCacheSlotPut

BlockCacheSlotGet = dev_read -> ret.GetB -> BlockCacheSlotFull
BlockCacheSlotPut = dev_write -> BlockCacheSlotEmpty

BlockCache = (||| i : {1..CONC_LEVEL} @ BlockCacheSlotEmpty) [|DeviceEvents|] Device \ DeviceEvents

------------------------------------------------------------------------------
-- InodeCache
------------------------------------------------------------------------------
InodeCacheSlotEmpty = ecall.GetI -> InodeCacheSlotGet
InodeCacheSlotFull = ecallret.PutI -> InodeCacheSlotPut

InodeCacheSlotGet = call.GetB -> ret.GetB -> callret.PutB -> eret.GetI -> InodeCacheSlotFull
InodeCacheSlotPut = call.GetB -> ret.GetB -> callret.PutB -> InodeCacheSlotEmpty

InodeCache = ||| i : {1 .. CONC_LEVEL} @ InodeCacheSlotEmpty

------------------------------------------------------------------------------
-- Superblock
------------------------------------------------------------------------------
Superblock = [] (c,r) : {(call,ret),(ecall,eret)} @ (
                c.Alloc -> call.GetB -> ret.GetB -> callret.PutB -> r.Alloc -> Superblock
                [] c.Free -> call.GetB -> ret.GetB -> callret.PutB -> r.Free -> Superblock
            )

------------------------------------------------------------------------------
-- OpenFile
------------------------------------------------------------------------------
channel f_lock, f_unlock

-- A file op represents a single operation that can be performed on a file. It
-- performs this operation sequentially. Write operations are guarded by a
-- lock, upon which all file ops sync on.
FileOp = ecall.Read -> FileOpRead
      [] ecall.Write -> f_lock -> FileOpWrite
      [] f_lock -> f_unlock -> FileOp

FileOpRead = call.GetB -> ret.GetB -> callret.PutB -> (recurse -> FileOpRead |~| eret.Read -> FileOp)
FileOpWrite = call.GetB -> ret.GetB -> callret.PutB -> (recurse -> FileOpWrite
                 |~| call.Alloc -> ret. Alloc -> call.Free -> ret.Free -> recurse -> FileOpWrite
                 |~| eret.Write -> f_unlock -> FileOp)

FileRegulator = ecall.Write -> f_lock -> FileRegulator

OpenFile = (([|{f_lock,f_unlock}|] i : {1..CONC_LEVEL} @ FileOp) [|{ecall.Write, f_lock}|] FileRegulator) \ {f_lock,f_unlock}

------------------------------------------------------------------------------
-- OpenDir
------------------------------------------------------------------------------
channel d_lock, d_unlock

DirOp = ecall.Lookup -> DirOpLookup
     [] ecall.Link -> d_lock -> DirOpLink
     [] d_lock -> d_unlock -> DirOp

DirOpLookup = call.GetB -> ret.GetB -> callret.PutB -> recurse -> DirOpLookup
           [] call.GetB -> ret.GetB -> callret.PutB -> eret.Lookup -> DirOp

DirOpLink = call.GetB -> ret.GetB -> callret.PutB -> call.Alloc -> ret.Alloc -> call.Free -> ret.Free -> call.GetB -> ret.GetB -> callret.PutB -> eret.Link -> d_unlock -> DirOp

DirRegulator = ecall.Link -> d_lock -> DirRegulator

OpenDir = (([|{d_lock,d_unlock}|] i : {1..CONC_LEVEL} @ DirOp) [|{ecall.Link, d_lock}|] DirRegulator) \ {d_lock,d_unlock}

------------------------------------------------------------------------------
-- Process
------------------------------------------------------------------------------
Process = scall.Fopen -> ProcessOpen
       [] scall.Fclose -> ecall.Write -> eret.Write -> sret.Fclose -> Process
       [] scall.Fread -> ecall.Read -> eret.Read -> sret.Fread -> Process
       [] scall.Fwrite -> ecall.Write -> eret.Write -> sret.Fwrite -> Process

ProcessOpen = ecall.Lookup -> eret.Lookup -> ecall.GetI -> eret.GetI -> ecallret.PutI -> recurse -> ProcessOpen
           [] ecall.Alloc -> eret.Alloc -> ecall.Free -> eret.Free -> ecall.Link -> eret.Link -> sret.Fopen -> Process

Processes(n) = (||| x:{0..n-1} @ Process)
------------------------------------------------------------------------------
-- System construction
------------------------------------------------------------------------------

FSSuper = (OpenDir ||| OpenFile) [|{call.Alloc, ret.Alloc, call.Free, ret.Free}|] (Superblock ||| InodeCache)
FileSystem = BlockCache [|{call.GetB, ret.GetB, callret.PutB}|] FSSuper \ {|call, ret, callret|}
FSClients(n) = FileSystem [|{|ecall, eret, ecallret|}|] Processes(n) \ {|ecall, eret, ecallret|}

-- Specifications
ClientSpec = scall?x -> ClientSpecWait(x)

ClientSpecWait(x) = sret!x -> ClientSpec
                |~| recurse -> ClientSpecWait(x)

ClientSpecs(n) = ||| x:{0..n-1} @ ClientSpec

assert ClientSpecs(1) [T= FSClients(1)
assert ClientSpecs(2) [T= FSClients(2)
assert ClientSpecs(3) [T= FSClients(3)
assert ClientSpecs(4) [T= FSClients(4)

assert ClientSpecs(1) [FD= FSClients(1)
